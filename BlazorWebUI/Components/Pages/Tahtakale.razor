@page "/tahtakale"

@using System.Net.Http.Json
@using MudBlazor
@using System.Web

@rendermode InteractiveServer
@inject TahtakaleIntegration tahtakaleIntegration
@inject IJSRuntime jsRuntime

@{
    int i = 0;
}
<div class="row text-right ">
    <div class="d-flex justify-content-end">
        <button class="btn btn-success" @onclick="ExcelExport">Excel Export</button>
      </div>
</div>
<MudDataGrid Items="@Elements" Filterable="true" ColumnResizeMode="ResizeMode.Column" Bordered="true" SortMode="SortMode.None" FilterCaseSensitivity="DataGridFilterCaseSensitivity.Default" FilterMode=" DataGridFilterMode.Simple">
    <Columns>
        <HierarchyColumn T="Item" />
        <PropertyColumn Property="x => x.Title" CellStyle="max-width: 130px; white-space: wrap;" Filterable="true" Title="Başlık" />
        <PropertyColumn Property="x => x.Barcode" CellStyle="max-width:20px !important;white-space: wrap;" Filterable="true" Title="Barkod" />
        <PropertyColumn Property="x => x.ModelNumber" Filterable="true" Title="Model" />
        <PropertyColumn Property="x => x.Price" Filterable="true" Title="Fiyatı" />
        <PropertyColumn Property="x => x.Quantity" Filterable="true" Title="Stok" />
        <TemplateColumn Title="Custom">
            <CellTemplate>
                <MudStack Row>
                    <MudLink Href="@context.Item.Link" Target="_blank">Siteye git</MudLink>
                </MudStack>
            </CellTemplate>

        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Açıklama</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@HttpUtility.HtmlDecode(context.Item.Description)</MudText>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Görsel</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudImage Src="@context.Item.ImageLink"  Elevation="25" Class="rounded-lg" />
                <MudImage Src="@context.Item.AdditionalImageLink1" Elevation="25" Class="rounded-lg" />
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Ürünün Tipi</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@HttpUtility.HtmlDecode(string.Join(',', context.Item.ProductType))</MudText>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Kategorisi</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@HttpUtility.HtmlDecode(string.Join(',', context.Item.Category))</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions=@(new int[] {500, 1000, 3000}) T="Item" />
    </PagerContent>
</MudDataGrid>
@code {
    private List<Item> Elements = new List<Item>();
    HashSet<Item> _selectedItems = new();
    HashSet<Item> _filterItems = new();
    FilterDefinition<Item> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;
    bool _filterOpen = false;
    protected override async Task OnInitializedAsync()
    {
        TahtaKaleResponseDto resp = await tahtakaleIntegration.GetAll();
        Elements = resp.Datas;

    }
    public async Task ExcelExport()
    {
        var excelBytes = await tahtakaleIntegration.GetExcelBytes();
        await jsRuntime.InvokeVoidAsync("downloadFile", excelBytes, "tahtakale-products.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
    public async Task DownloadImage(string url)
    {
        await jsRuntime.InvokeVoidAsync("downloadImage", url, "image.jpg");
    }
    void OpenFilter()
    {
        _filterOpen = true;
    }

}